{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDependencyArrayRef = void 0;\n/**\n * useEffect(\n *    ()=> { ... },\n *    [ { \"foo\": \"bar\" } ]\n * )\n * => The callback will be invoked every render.\n * because { \"foo\": \"bar\" } is a new instance every render.\n *\n * useEffect(\n *    ()=> { ... },\n *    [ getDependencyArrayRef({ \"foo\": \"bar\" }) ]\n * );\n * => The callback will only be invoked once.\n *\n * The optimization will be enabled only if obj is\n * of the form Record<string, string | number | undefined | null>\n * otherwise the object is returned (the function is the identity function).\n */\nfunction getDependencyArrayRef(obj) {\n  if (!(obj instanceof Object) || typeof obj === \"function\") {\n    return obj;\n  }\n  var arr = [];\n  for (var key in obj) {\n    var value = obj[key];\n    var typeofValue = typeof value;\n    if (!(typeofValue === \"string\" || typeofValue === \"number\" && !isNaN(value) || typeofValue === \"boolean\" || value === undefined || value === null)) {\n      return obj;\n    }\n    arr.push(\"\".concat(key, \":\").concat(typeofValue, \"_\").concat(value));\n  }\n  return \"xSqLiJdLMd9s\" + arr.join(\"|\");\n}\nexports.getDependencyArrayRef = getDependencyArrayRef;","map":{"version":3,"names":["Object","defineProperty","exports","value","getDependencyArrayRef","obj","arr","key","typeofValue","isNaN","undefined","push","concat","join"],"sources":["/home/sristi/Desktop/thanusha_bday/node_modules/tss-react/tools/getDependencyArrayRef.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDependencyArrayRef = void 0;\n/**\n * useEffect(\n *    ()=> { ... },\n *    [ { \"foo\": \"bar\" } ]\n * )\n * => The callback will be invoked every render.\n * because { \"foo\": \"bar\" } is a new instance every render.\n *\n * useEffect(\n *    ()=> { ... },\n *    [ getDependencyArrayRef({ \"foo\": \"bar\" }) ]\n * );\n * => The callback will only be invoked once.\n *\n * The optimization will be enabled only if obj is\n * of the form Record<string, string | number | undefined | null>\n * otherwise the object is returned (the function is the identity function).\n */\nfunction getDependencyArrayRef(obj) {\n    if (!(obj instanceof Object) || typeof obj === \"function\") {\n        return obj;\n    }\n    const arr = [];\n    for (const key in obj) {\n        const value = obj[key];\n        const typeofValue = typeof value;\n        if (!(typeofValue === \"string\" ||\n            (typeofValue === \"number\" && !isNaN(value)) ||\n            typeofValue === \"boolean\" ||\n            value === undefined ||\n            value === null)) {\n            return obj;\n        }\n        arr.push(`${key}:${typeofValue}_${value}`);\n    }\n    return \"xSqLiJdLMd9s\" + arr.join(\"|\");\n}\nexports.getDependencyArrayRef = getDependencyArrayRef;\n"],"mappings":"AAAA,YAAY;;AACZ;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,qBAAqBA,CAACC,GAAG,EAAE;EAChC,IAAI,EAAEA,GAAG,YAAYL,MAAM,CAAC,IAAI,OAAOK,GAAG,KAAK,UAAU,EAAE;IACvD,OAAOA,GAAG;EACd;EACA,IAAMC,GAAG,GAAG,EAAE;EACd,KAAK,IAAMC,GAAG,IAAIF,GAAG,EAAE;IACnB,IAAMF,KAAK,GAAGE,GAAG,CAACE,GAAG,CAAC;IACtB,IAAMC,WAAW,GAAG,OAAOL,KAAK;IAChC,IAAI,EAAEK,WAAW,KAAK,QAAQ,IACzBA,WAAW,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACN,KAAK,CAAE,IAC3CK,WAAW,KAAK,SAAS,IACzBL,KAAK,KAAKO,SAAS,IACnBP,KAAK,KAAK,IAAI,CAAC,EAAE;MACjB,OAAOE,GAAG;IACd;IACAC,GAAG,CAACK,IAAI,IAAAC,MAAA,CAAIL,GAAG,OAAAK,MAAA,CAAIJ,WAAW,OAAAI,MAAA,CAAIT,KAAK,EAAG;EAC9C;EACA,OAAO,cAAc,GAAGG,GAAG,CAACO,IAAI,CAAC,GAAG,CAAC;AACzC;AACAX,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}